#!/usr/bin/env ruby
# -*- enh-ruby -*-

%w(clamp nokogiri bytes_converter pathname fileutils tempfile open-uri).each(&method(:require))
module Domrun
  def libvirt_xml
    @doc = Nokogiri::XML(open(template))
    @doc.at_css('name').content = name
    @doc.at_css('title').content = title
    attach_networks
    @doc.at_css('disk').at_css('source')['file'] = disk
    %w(memory currentMemory).each { |c| @doc.at_css(c).content = mem}
    @doc.at_css('vcpu').content = cpus
  end
  def attach_networks
    master = @doc.at_css('interface').dup
    @doc.at_css('interface').remove
    container_networks.each do |n|
      cp = master.dup
      nic_name = 'vn4' + n.values.first
      script_path = '/usr/local/bin/qemu-ifup-' + nic_name
      cp.at_css('target')['dev'] = nic_name
      cp.at_css('script')['path'] = script_path
      Pathname.new(script_path).write(script(n.values.first))
      FileUtils.chmod(0755, script_path)
      @doc.at_css('devices').add_child(cp)
    end
  end
  def script(n)
    bname = "br-#{n}-$1"
    log = "logger -t qemu-ifup #{bname}"
    ['#!/bin/bash',
     "ip link set $1 up",
     "#{log} ip link set $1 up",
     "sleep 3",
     "brctl addbr #{bname}",
     "#{log} created bridge" ,
     "brctl addif #{bname} $1",
     "#{log} added $1 to bridge" ,
     "brctl addif #{bname} #{n}",
     "#{log} added #{n} to bridge",
     "ip link set dev #{bname} up",
     "#{log} $(brctl show #{bname})"].join("\n")
  end
  def container_networks
    `ip a`.lines.grep(/inet /).grep_v(/ lo$/).map { |i| r = i.split(' '); { r[1] => r.last } }
  end
  def _env
    self.class.declared_options.select{|o| !o.environment_variable.nil?}.map do |o|
      o.environment_variable + '=' + eval(o.attribute_name).to_s
    end
  end

  class CLI < Clamp::Command
    include Domrun
    option ['-n', '--name'], 'NAME', 'instance name', environment_variable: 'VM_NAME', required: true
    option ['-t', '--title'], 'TITLE', 'instance title', environment_variable: 'VM_TITLE', required: true
    option ['-m', '--mem'], 'MEM', 'amount of memory, ie 4gb 0.5gb 1024mb', environment_variable: 'VM_MEM', required: true
    option ['-c', '--cpus'], 'CPUS', 'amount of cpus', environment_variable: 'VM_CPUS', required: true
    option ['-d', '--disk'], 'DISK', 'filesystem path to qcow2 img', environment_variable: 'VM_DISK', default: '/var/lib/libvirt/images/image.qcow2'
    option ['-x', '--xml'], 'DOMXML', 'filesystem path to domain.xml', environment_variable: 'VM_XML', attribute_name: 'domxml',default: '/etc/default/domrun.xml'
    parameter '[TEMPLATE]', 'URI to xml template', environment_variable: 'VM_TEMPLATE'

    def execute
      @template = 'https://raw.githubusercontent.com/voobscout/dockerfiles/master/arch/libvirt/domain_template.xml' unless @template
      libvirt_xml
      Pathname.new('/etc/default/domrun').write(_env.join("\n"))
      Pathname.new(domxml).write(@doc.to_xml)
      # `#{virsh } net-start default`
      exec '/lib/systemd/systemd --system'
    end
    def mem=(m)
      @mem = BytesConverter.convert(m).to_i / 1024
    end
  end
end

Domrun::CLI.run
